[{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to magrittr","title":"Contributing to magrittr","text":"outlines propose change magrittr. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to magrittr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to magrittr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://magrittr.tidyverse.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to magrittr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"tidyverse/magrittr\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to magrittr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://magrittr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to magrittr","text":"Please note magrittr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://magrittr.tidyverse.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 magrittr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://magrittr.tidyverse.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with magrittr","title":"Getting help with magrittr","text":"Thanks using magrittr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://magrittr.tidyverse.org/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with magrittr","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://magrittr.tidyverse.org/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with magrittr","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://magrittr.tidyverse.org/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with magrittr","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/magrittr.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Introducing magrittr","text":"magrittr (pronounced sophisticated french accent) package two aims: decrease development time improve readability maintainability code. even shortr: make code smokin’ (puff puff)! achieve humble aims, magrittr (remember accent) provides new “pipe”-like operator, %>%, may pipe value forward expression function call; something along lines x %>% f, rather f(x). unknown feature elsewhere; prime example |> operator used extensively F# (say least) indeed – along Unix pipes – served motivation developing magrittr package. vignette describes main features magrittr demonstrates features added since initial release.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/magrittr.html","id":"introduction-and-basics","dir":"Articles","previous_headings":"","what":"Introduction and basics","title":"Introducing magrittr","text":"first encounter, may wonder whether operator %>% can really beneficial; may notice, semantically changes code way makes intuitive read write. Consider following example, mtcars dataset shipped R munged little: start value, mtcars (data.frame). , extract subset, aggregate information based number cylinders, transform dataset adding variable kilometers per liter supplement miles per gallon. Finally print result assigning . Note code arranged logical order think task: data->transform->aggregate, also order code execute. ’s like recipe – easy read, easy follow! horrific alternative write: lot clutter parentheses, mental task deciphering code challenging—particularly write . Note also “building” function fly use aggregate simple magrittr: rather actual value left-hand side pipeline, just use placeholder. also useful R’s *apply family functions. Granted, may make second example better, perhaps throw temporary variables (often avoided degree using magrittr), one often sees cluttered lines like ones presented. another selling point: suppose want quickly add another step somewhere process. easy pipeline version, little challenging “standard” example. combined example shows neat features pipe (): default left-hand side (LHS) piped first argument function appearing right-hand side (RHS). case subset transform expressions. %>% may used nested fashion, e.g. may appear expressions within arguments. illustrated mpg kpl conversion. LHS needed position first, one can use dot,'.', placeholder. shown aggregate expression. dot e.g. formula confused placeholder, utilized aggregate expression. Whenever one argument (LHS) needed, one can omit empty parentheses. shown call print (also returns argument). , LHS %>% print(), even LHS %>% print(.) also work. pipeline dot (.) LHS create unary function. used define aggregator function. One feature, demonstrated piping anonymous functions, lambdas. possible using standard function definitions, e.g.: However, magrittr also allows short-hand notation: Since right-hand sides really “body expressions” unary functions, natural extension simple right-hand side expressions. course, longer complex functions can made using approach. first example, anonymous function enclosed parentheses. Whenever want use function- call-generating statement right-hand side, parentheses used evaluate right-hand side piping takes place. Another, less useful example :","code":"library(magrittr)  car_data <-    mtcars %>%   subset(hp > 100) %>%   aggregate(. ~ cyl, data = ., FUN = . %>% mean %>% round(2)) %>%   transform(kpl = mpg %>% multiply_by(0.4251)) %>%   print #>   cyl   mpg   disp     hp drat   wt  qsec   vs   am gear carb       kpl #> 1   4 25.90 108.05 111.00 3.94 2.15 17.75 1.00 1.00 4.50 2.00 11.010090 #> 2   6 19.74 183.31 122.29 3.59 3.12 17.98 0.57 0.43 3.86 3.43  8.391474 #> 3   8 15.10 353.10 209.21 3.23 4.00 16.77 0.00 0.14 3.29 3.50  6.419010 car_data <-    transform(aggregate(. ~ cyl,                        data = subset(mtcars, hp > 100),                        FUN = function(x) round(mean(x), 2)),              kpl = mpg*0.4251) car_data %>% (function(x) {   if (nrow(x) > 2)      rbind(head(x, 1), tail(x, 1))   else x }) car_data %>% {    if (nrow(.) > 0)     rbind(head(., 1), tail(., 1))   else . } #>   cyl  mpg   disp     hp drat   wt  qsec vs   am gear carb      kpl #> 1   4 25.9 108.05 111.00 3.94 2.15 17.75  1 1.00 4.50  2.0 11.01009 #> 3   8 15.1 353.10 209.21 3.23 4.00 16.77  0 0.14 3.29  3.5  6.41901 1:10 %>% (substitute(f(), list(f = sum))) #> [1] 55"},{"path":"https://magrittr.tidyverse.org/dev/articles/magrittr.html","id":"additional-pipe-operators","dir":"Articles","previous_headings":"","what":"Additional pipe operators","title":"Introducing magrittr","text":"magrittr also provides three related pipe operators. common %>% become useful special cases. “tee” pipe, %T>% works like %>%, except returns left-hand side value, result right-hand side operation. useful step pipeline used side-effect (printing, plotting, logging, etc.). example (actual plot omitted ): “exposition” pipe, %$% exposes names within left-hand side object right-hand side expression. Essentially, short-hand using functions (left-hand side objects accepted). operator handy functions data argument, example lm aggregate . examples illustration: Finally, “assignment” pipe %<>% can used first pipe chain. effect result pipeline assigned left-hand side object, rather returning result usual. essentially shorthand notation expressions like foo <- foo %>% bar %>% baz, boils foo %<>% bar %>% baz. Another example : %<>% can used whenever expr <- ... makes sense, e.g.  x %<>% foo %>% bar x[1:10] %<>% foo %>% bar x$baz %<>% foo %>% bar","code":"rnorm(200) %>% matrix(ncol = 2) %T>% plot %>% # plot usually does not return anything.  colSums #> [1] 3.888898 3.385324 iris %>%   subset(Sepal.Length > mean(Sepal.Length)) %$%   cor(Sepal.Length, Sepal.Width)     data.frame(z = rnorm(100)) %$%    ts.plot(z) iris$Sepal.Length %<>% sqrt"},{"path":"https://magrittr.tidyverse.org/dev/articles/magrittr.html","id":"aliases","dir":"Articles","previous_headings":"","what":"Aliases","title":"Introducing magrittr","text":"addition %>%-operator, magrittr provides aliases operators make operations addition multiplication fit well magrittr-syntax. example, consider: written compact form : see list aliases, execute e.g. ?multiply_by.","code":"rnorm(1000)    %>% multiply_by(5) %>% add(5)         %>% {     cat(\"Mean:\", mean(.),         \"Variance:\", var(.), \"\\n\")    head(.) } #> Mean: 5.15329 Variance: 23.86652 #> [1]  3.232805 14.272553 14.619434  6.116328  6.166391  4.182016 rnorm(100) %>% `*`(5) %>% `+`(5) %>%  {   cat(\"Mean:\", mean(.), \"Variance:\", var(.),  \"\\n\")   head(.) }"},{"path":"https://magrittr.tidyverse.org/dev/articles/magrittr.html","id":"development","dir":"Articles","previous_headings":"","what":"Development","title":"Introducing magrittr","text":"magrittr package also available development version GitHub development page: github.com/tidyverse/magrittr.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"code-transformation","dir":"Articles","previous_headings":"","what":"Code transformation","title":"Design tradeoffs","text":"three main options might transform pipeline base R expressions. illustrated x %>% foo() %>% bar(): Nested Eager (mask), masking environment essentially %>% implemented prior magrittr 2.0: Eager (mask-num): masking environment, numbered placeholder Eager (lexical): lexical environment variant assigns pipe expressions placeholder . current environment. assignment temporary: pipe returned, placeholder binding reset previous state. Lazy (mask): masking environments Lazy (mask-num): masking environment, numbered placeholder Lazy (lexical-num): lexical environment, numbered placeholder ’ll first explore desired properties might want pipe possess see three variants .","code":"bar(foo(x)) local({   . <- x   . <- foo(.)   bar(.) }) local({   ...1 <- x   ...2 <- foo(...1)   bar(...2) }) with_dot_cleanup <- function(expr) {   # Initialises `.` in the caller environment and resets it on exit.   # (We use `:=` instead of `=` to avoid partial matching.)   rlang::local_bindings(. := NULL, .env = parent.frame())   expr } with_dot_cleanup({   . <- x   . <- foo(.)   bar(.) }) mask1 <- new.env(parent = env) mask2 <- new.env(parent = env)  delayedAssign(\".\", x, mask1) delayedAssign(\".\", foo(.), mask2) with(mask2, bar(.)) local({   delayedAssign(\"...1\", x)   delayedAssign(\"...2\", foo(...1))   bar(...2) }) delayedAssign(\"...1\", x) delayedAssign(\"...2\", foo(.)) bar(...2)"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"desired-properties","dir":"Articles","previous_headings":"","what":"Desired properties","title":"Design tradeoffs","text":"properties might want pipe possess, roughly ordered important least important. Visibility: visibility final function pipe preserved. important pipes end side-effect function (generally returns first argument invisibly) print. Multiple placeholders: component pipe evaluated even multiple placeholders, sample(10) %>% cbind(., .) yields two columns value. Relatedly, sample(10) %T>% print() %T>% print() must print values twice. Lazy evaluation: steps pipe evaluated actually needed. useful property means pipes can handle code like stop(\"!\") %>% try(), making pipes capable capturing wider range R expressions. hand, might surprising effects. instance function suppresses warnings added end pipeline, suppression takes effect whole pipeline. Persistence piped values: arguments necessarily evaluated right away piped function. Sometimes evaluated long pipeline returned, example function factory piped. persistent piped values, constructed function can called time: Refcount neutrality: return value pipeline reference count 1 can mutated place manipulations. Eager unbinding: pipes often used large data objects, intermediate objects pipeline unbound soon possible available garbage collection. Progressive stack: using pipe add entries call stack possible, traceback() maximally useful. Lexical side effects: side effects occur current lexical environment. way, NA %>% { foo <- . } assigns piped value current environment NA %>% { return(.) } returns function contains pipeline. Continuous stack: pipe affect chain parent frames. important tree representations call stack. possible proper visibility neutral impact refcounts implementations bit careful, ’ll consider properties:","code":"factory <- function(x) function() x fn <- NA %>% factory() fn() #> [1] NA"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"implications-of-design-decisions","dir":"Articles","previous_headings":"Desired properties","what":"Implications of design decisions","title":"Design tradeoffs","text":"properties direct reflection high level design decisions.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"placeholder-binding","dir":"Articles","previous_headings":"Desired properties > Implications of design decisions","what":"Placeholder binding","title":"Design tradeoffs","text":"nested pipe assign piped expressions placeholder. variants perform assignment. means nested rewrite approach, isn’t possible multiple placeholders unless piped expression pasted multiple times. cause multiple evaluations deleterious effects: Assigning placeholder within argument preserve nestedness lazyness. However wouldn’t work properly ’s guarantee first argument evaluated second argument. reasons, nested pipe support multiple placeholders. contrast, variants assign result pipe expressions placeholder. variations placeholder binding created (lazily eagerly, mask current environment, numbered symbols unique symbol) variants allow multiple placeholders.","code":"sample(10) %>% list(., .)  # Becomes list(sample(10), sample(10)) sample(10) %>% foo(., .) foo(. <- sample(10), .)"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"masking-environment","dir":"Articles","previous_headings":"Desired properties > Implications of design decisions","what":"Masking environment","title":"Design tradeoffs","text":"local variants pipe evaluate mask, lexical effects continuous stack. unlike lexical variants evaluate current environment.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"laziness","dir":"Articles","previous_headings":"Desired properties > Implications of design decisions","what":"Laziness","title":"Design tradeoffs","text":"Unlike lazy variants, eager versions implementing pipe iterated evaluation pass lazy evaluation criterion. Secondly, lazy variant passes progressive stack criterion. construction, lazy evaluation requires pushing pipe expressions stack evaluation starts. Conversely, eager variants progressive stack.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"numbered-placeholders","dir":"Articles","previous_headings":"Desired properties > Implications of design decisions","what":"Numbered placeholders","title":"Design tradeoffs","text":"None variants use numbered placeholders can unbind piped values eagerly. achieve persistence bindings.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"three-implementations","dir":"Articles","previous_headings":"","what":"Three implementations","title":"Design tradeoffs","text":"GNU R team considering implementing nested approach base R parse-time code transformation (just like -> transformed <- parser). implemented three approaches magrittr: nested pipe eager lexical pipe lazy masking pipe approaches complementary strengths weaknesses.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"nested-pipe","dir":"Articles","previous_headings":"Three implementations","what":"Nested pipe","title":"Design tradeoffs","text":"","code":"`%|>%` <- magrittr::pipe_nested"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"multiple-placeholders","dir":"Articles","previous_headings":"Three implementations > Nested pipe","what":"Multiple placeholders ❌","title":"Design tradeoffs","text":"nested pipe bind expressions placeholder can’t support multiple placeholders.","code":"\"foo\" %|>% list(., .) #> Error: Can't use multiple placeholders."},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lazy-evaluation","dir":"Articles","previous_headings":"Three implementations > Nested pipe","what":"Lazy evaluation ✅","title":"Design tradeoffs","text":"relies usual rules argument application, nested pipe lazy.","code":"{   stop(\"oh no\") %|>% try(silent = TRUE)   \"success\" } #> [1] \"success\""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"persistence-and-eager-unbinding","dir":"Articles","previous_headings":"Three implementations > Nested pipe","what":"Persistence and eager unbinding ✅","title":"Design tradeoffs","text":"pipe expressions binded promises within execution environment function. environment persists long promise holds onto . Evaluating promise discards reference environment becomes available garbage collection. instance, function factory creates function. constructed function returns value supplied time creation: cause issue nested pipe:","code":"factory <- function(x) function() x fn <- factory(TRUE) fn() #> [1] TRUE fn <- TRUE %|>% factory() fn()"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"progressive-stack","dir":"Articles","previous_headings":"Three implementations > Nested pipe","what":"Progressive stack ❌","title":"Design tradeoffs","text":"piped expressions lazily evaluated, whole pipeline pushed stack execution starts. results complex backtrace necessary: Also note expressions backtrace look different actual code. nested rewrite pipeline.","code":"faulty <- function() stop(\"tilt\") f <- function(x) x + 1 g <- function(x) x + 2 h <- function(x) x + 3  faulty() %|>% f() %|>% g() %|>% h() #> Error in faulty() : tilt  traceback() #> 7: stop(\"tilt\") #> 6: faulty() #> 5: f(faulty()) #> 4: g(f(faulty())) #> 3: h(g(f(faulty()))) #> 2: .External2(magrittr_pipe) at pipe.R#181 #> 1: faulty() %|>% f() %|>% g() %|>% h()"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lexical-effects","dir":"Articles","previous_headings":"Three implementations > Nested pipe","what":"Lexical effects ✅","title":"Design tradeoffs","text":"benefit using normal R rules evaluation. Side effects occur correct environment: Control flow correct behaviour:","code":"foo <- FALSE TRUE %|>% assign(\"foo\", .) foo #> [1] TRUE fn <- function() {   TRUE %|>% return()   FALSE } fn() #> [1] TRUE"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"continuous-stack","dir":"Articles","previous_headings":"Three implementations > Nested pipe","what":"Continuous stack ✅","title":"Design tradeoffs","text":"evaluation occurs current environment, stack continuous. Let’s instrument errors structured backtrace see means: tree representation backtrace correctly represents hierarchy execution frames:","code":"options(error = rlang::entrace) foobar <- function(x) x %|>% quux() quux <- function(x) x %|>% stop()  \"tilt\" %|>% foobar() #> Error in x %|>% stop() : tilt  rlang::last_trace() #> <error/rlang_error> #> tilt #> Backtrace: #>     █ #>  1. ├─\"tilt\" %|>% foobar() #>  2. └─global::foobar(\"tilt\") #>  3.   ├─x %|>% quux() #>  4.   └─global::quux(x) #>  5.     └─x %|>% stop()"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"eager-lexical-pipe","dir":"Articles","previous_headings":"Three implementations","what":"Eager lexical pipe","title":"Design tradeoffs","text":"","code":"`%!>%` <- magrittr::pipe_eager_lexical"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"multiple-placeholders-1","dir":"Articles","previous_headings":"Three implementations > Eager lexical pipe","what":"Multiple placeholders ✅","title":"Design tradeoffs","text":"Pipe expressions eagerly assigned placeholder. makes possible use placeholder multiple times without causing multiple evaluations.","code":"\"foo\" %!>% list(., .) #> [[1]] #> [1] \"foo\" #>  #> [[2]] #> [1] \"foo\""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lazy-evaluation-1","dir":"Articles","previous_headings":"Three implementations > Eager lexical pipe","what":"Lazy evaluation ❌","title":"Design tradeoffs","text":"Assignment forces eager evaluation step.","code":"{   stop(\"oh no\") %!>% try(silent = TRUE)   \"success\" } #> Error in stop(\"oh no\") %!>% try(silent = TRUE): oh no"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"persistence","dir":"Articles","previous_headings":"Three implementations > Eager lexical pipe","what":"Persistence: ❌","title":"Design tradeoffs","text":"’re updating value . step, piped expressions persistent. subtle effects piped expressions evaluated right away. eager pipe get rather confusing results factory function try call constructed function middle pipeline. following snippet placeholder . binded constructed function rather initial value TRUE, time function called: Also, since ’re binding . current environment, need clean pipeline returned. point, placeholder longer exists: reset previous value, :","code":"fn <- TRUE %!>% factory() %!>% { .() } fn() #> function() x #> <bytecode: 0x56511e7a7960> #> <environment: 0x56511bcff550> fn <- TRUE %!>% factory() fn() #> Error in fn(): object '.' not found . <- \"wrong\" fn <- TRUE %!>% factory() fn() #> [1] \"wrong\""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"eager-unbinding","dir":"Articles","previous_headings":"Three implementations > Eager lexical pipe","what":"Eager unbinding: ✅","title":"Design tradeoffs","text":"flip side updating value placeholder step. previous intermediary values can collected right away.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"progressive-stack-1","dir":"Articles","previous_headings":"Three implementations > Eager lexical pipe","what":"Progressive stack: ✅","title":"Design tradeoffs","text":"Since pipe expressions evaluated one one come, relevant part pipeline stack error thrown:","code":"faulty <- function() stop(\"tilt\") f <- function(x) x + 1 g <- function(x) x + 2 h <- function(x) x + 3  faulty() %!>% f() %!>% g() %!>% h() #> Error in faulty() : tilt  traceback() #> 4: stop(\"tilt\") #> 3: faulty() #> 2: .External2(magrittr_pipe) at pipe.R#163 #> 1: faulty() %!>% f() %!>% g() %!>% h()"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lexical-effects-and-continuous-stack","dir":"Articles","previous_headings":"Three implementations > Eager lexical pipe","what":"Lexical effects and continuous stack: ✅","title":"Design tradeoffs","text":"Evaluating current environment rather mask produces correct side effects:","code":"foo <- FALSE NA %!>% { foo <- TRUE; . } #> [1] NA  foo #> [1] TRUE fn <- function() {   TRUE %!>% return()    FALSE } fn() #> [1] TRUE"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lazy-masking-pipe","dir":"Articles","previous_headings":"Three implementations","what":"Lazy masking pipe","title":"Design tradeoffs","text":"","code":"`%?>%` <- magrittr::pipe_lazy_masking"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"multiple-placeholders-2","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Multiple placeholders ✅","title":"Design tradeoffs","text":"Pipe expressions lazily assigned placeholder. makes possible use placeholder multiple times without causing multiple evaluations.","code":"\"foo\" %?>% list(., .) #> [[1]] #> [1] \"foo\" #>  #> [[2]] #> [1] \"foo\""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lazy-evaluation-2","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Lazy evaluation ✅","title":"Design tradeoffs","text":"Arguments assigned delayedAssign() lazily evaluated:","code":"{   stop(\"oh no\") %?>% try(silent = TRUE)   \"success\" } #> [1] \"success\""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"persistence-1","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Persistence: ✅","title":"Design tradeoffs","text":"lazy masking pipe uses one masking environment per pipe expression. allows persistence intermediary values order evaluation. factory function works expected instance:","code":"fn <- TRUE %?>% factory() fn() #> [1] TRUE"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"eager-unbinding-1","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Eager unbinding: ✅","title":"Design tradeoffs","text":"use one mask environment per pipe expression, intermediary values can collected soon longer needed.","code":""},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"progressive-stack-2","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Progressive stack: ❌","title":"Design tradeoffs","text":"lazy pipe whole pipeline pushed onto stack evaluation. Note however backtrace less cluttered nested pipe approach, thanks placeholder.","code":"faulty <- function() stop(\"tilt\") f <- function(x) x + 1 g <- function(x) x + 2 h <- function(x) x + 3  faulty() %?>% f() %?>% g() %?>% h() #> Error in faulty() : tilt  traceback() #> 7: stop(\"tilt\") #> 6: faulty() #> 5: f(.) #> 4: g(.) #> 3: h(.) #> 2: .External2(magrittr_pipe) at pipe.R#174 #> 1: faulty() %?>% f() %?>% g() %?>% h()"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"lexical-effects-1","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Lexical effects ❌","title":"Design tradeoffs","text":"lazy pipe evaluates mask. causes lexical side effects occur incorrect environment. Stack-sensitive functions like return() function find proper frame environment:","code":"foo <- FALSE TRUE %?>% assign(\"foo\", .) foo #> [1] FALSE fn <- function() {   TRUE %?>% return()   FALSE } fn() #> [1] FALSE"},{"path":"https://magrittr.tidyverse.org/dev/articles/tradeoffs.html","id":"continuous-stack-1","dir":"Articles","previous_headings":"Three implementations > Lazy masking pipe","what":"Continuous stack ❌","title":"Design tradeoffs","text":"masking environment causes discontinuous stack tree:","code":"foobar <- function(x) x %?>% quux() quux <- function(x) x %?>% stop()  \"tilt\" %?>% foobar() #> Error in x %?>% stop() : tilt  rlang::last_trace() #> <error/rlang_error> #> tilt #> Backtrace: #>     █ #>  1. ├─\"tilt\" %?>% foobar() #>  2. ├─global::foobar(.) #>  3. │ └─x %?>% quux() #>  4. └─global::quux(.) #>  5.   └─x %?>% stop()"},{"path":"https://magrittr.tidyverse.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Milton Bache. Author, copyright holder.            Original author creator magrittr Hadley Wickham. Author. Lionel Henry. Maintainer. . Copyright holder, funder.","code":""},{"path":"https://magrittr.tidyverse.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bache S, Wickham H (2023). magrittr: Forward-Pipe Operator R. https://magrittr.tidyverse.org, https://github.com/tidyverse/magrittr.","code":"@Manual{,   title = {magrittr: A Forward-Pipe Operator for R},   author = {Stefan Milton Bache and Hadley Wickham},   year = {2023},   note = {https://magrittr.tidyverse.org, https://github.com/tidyverse/magrittr}, }"},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Forward-Pipe Operator for R","text":"magrittr package offers set operators make code readable : structuring sequences data operations left--right (opposed inside ), avoiding nested function calls, minimizing need local variables function definitions, making easy add steps anywhere sequence operations. operators pipe left-hand side values forward expressions appear right-hand side, .e. one can replace f(x) x %>% f(), %>% (main) pipe-operator. coupling several function calls pipe-operator, benefit become apparent. Consider pseudo example: Four operations performed arrive desired data set, written natural order: order execution. Also, temporary variables needed. yet another operation required, straightforward add sequence operations wherever may needed. new magrittr, best place start pipes chapter R data science.","code":"the_data <-   read.csv('/path/to/data/file.csv') %>%   subset(variable_a > x) %>%   transform(variable_c = variable_a/variable_b) %>%   head(100)"},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Forward-Pipe Operator for R","text":"","code":"# The easiest way to get magrittr is to install the whole tidyverse: install.packages(\"tidyverse\")  # Alternatively, install just magrittr: install.packages(\"magrittr\")  # Or the development version from GitHub: # install.packages(\"devtools\") pak::pak(\"tidyverse/magrittr\")"},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"basic-piping","dir":"","previous_headings":"Usage","what":"Basic piping","title":"A Forward-Pipe Operator for R","text":"x %>% f equivalent f(x) x %>% f(y) equivalent f(x, y) x %>% f %>% g %>% h equivalent h(g(f(x))) , “equivalent” technically exact: evaluation non-standard, left-hand side evaluated passed right-hand side expression. However, cases practical implication.","code":""},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"the-argument-placeholder","dir":"","previous_headings":"Usage","what":"The argument placeholder","title":"A Forward-Pipe Operator for R","text":"x %>% f(y, .) equivalent f(y, x) x %>% f(y, z = .) equivalent f(y, z = x)","code":""},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"re-using-the-placeholder-for-attributes","dir":"","previous_headings":"Usage","what":"Re-using the placeholder for attributes","title":"A Forward-Pipe Operator for R","text":"straightforward use placeholder several times right-hand side expression. However, placeholder appears nested expressions magrittr still apply first-argument rule. reason cases results clean code. x %>% f(y = nrow(.), z = ncol(.)) equivalent f(x, y = nrow(x), z = ncol(x)) behavior can overruled enclosing right-hand side braces: x %>% {f(y = nrow(.), z = ncol(.))} equivalent f(y = nrow(x), z = ncol(x))","code":""},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"building-unary-functions","dir":"","previous_headings":"Usage","what":"Building (unary) functions","title":"A Forward-Pipe Operator for R","text":"pipeline starting . return function can later used apply pipeline values. Building functions magrittr therefore similar building values.","code":"f <- . %>% cos %>% sin  # is equivalent to  f <- function(.) sin(cos(.))"},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"pipe-with-exposition-of-variables","dir":"","previous_headings":"Usage","what":"Pipe with exposition of variables","title":"A Forward-Pipe Operator for R","text":"Many functions accept data argument, e.g. lm aggregate, useful pipeline data first processed passed function. also functions data argument, useful expose variables data. done %$% operator:","code":"iris %>%   subset(Sepal.Length > mean(Sepal.Length)) %$%   cor(Sepal.Length, Sepal.Width) #> [1] 0.3361992  data.frame(z = rnorm(100)) %$%   ts.plot(z)"},{"path":"https://magrittr.tidyverse.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Forward-Pipe Operator for R","text":"Please note magrittr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Aliases — extract","title":"Aliases — extract","text":"magrittr provides series aliases can pleasant use composing chains using %>% operator.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/aliases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aliases — extract","text":"Currently implemented aliases ","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/aliases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aliases — extract","text":"","code":"iris %>%    extract(, 1:4) %>%    head #>   Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1          5.1         3.5          1.4         0.2 #> 2          4.9         3.0          1.4         0.2 #> 3          4.7         3.2          1.3         0.2 #> 4          4.6         3.1          1.5         0.2 #> 5          5.0         3.6          1.4         0.2 #> 6          5.4         3.9          1.7         0.4  good.times <-   Sys.Date() %>%   as.POSIXct %>%   seq(by = \"15 mins\", length.out = 100) %>%   data.frame(timestamp = .)  good.times$quarter <-   good.times %>%   use_series(timestamp) %>%   format(\"%M\") %>%   as.numeric %>%   divide_by_int(15) %>%   add(1)"},{"path":"https://magrittr.tidyverse.org/dev/reference/compound.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment pipe — %<>%","title":"Assignment pipe — %<>%","text":"Pipe object forward function call expression update lhs object resulting value.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/compound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment pipe — %<>%","text":"","code":"lhs %<>% rhs"},{"path":"https://magrittr.tidyverse.org/dev/reference/compound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment pipe — %<>%","text":"lhs object serves initial value target. rhs function call using magrittr semantics.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/compound.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assignment pipe — %<>%","text":"assignment pipe, %<>%, used update value first piping one rhs expressions, assigning result. example, some_object %<>%  foo %>% bar equivalent some_object <- some_object %>% foo %>% bar. must first pipe-operator chain, otherwise works like %>%.","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/reference/compound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assignment pipe — %<>%","text":"","code":"iris$Sepal.Length %<>% sqrt  x <- rnorm(100)  x %<>% abs %>% sort  is_weekend <- function(day) {    # day could be e.g. character a valid representation    day %<>% as.Date        result <- day %>% format(\"%u\") %>% as.numeric %>% is_greater_than(5)        if (result)      message(day %>% paste(\"is a weekend!\"))    else      message(day %>% paste(\"is not a weekend!\"))        invisible(result) }"},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_fseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Debugging function for functional sequences. — debug_fseq","title":"Debugging function for functional sequences. — debug_fseq","text":"utility function marking functions functional sequence debbuging.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_fseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debugging function for functional sequences. — debug_fseq","text":"","code":"debug_fseq(fseq, ...)  undebug_fseq(fseq)"},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_fseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debugging function for functional sequences. — debug_fseq","text":"fseq functional sequence. ... indices functions debug.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_fseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debugging function for functional sequences. — debug_fseq","text":"invisible(NULL).","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Debugging function for magrittr pipelines. — debug_pipe","title":"Debugging function for magrittr pipelines. — debug_pipe","text":"function wrapper around browser, makes easier debug certain places magrittr pipe chain.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debugging function for magrittr pipelines. — debug_pipe","text":"","code":"debug_pipe(x)"},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debugging function for magrittr pipelines. — debug_pipe","text":"x value","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/debug_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debugging function for magrittr pipelines. — debug_pipe","text":"x","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/exposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposition pipe — %$%","title":"Exposition pipe — %$%","text":"Expose names lhs rhs expression. useful functions built-data argument.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/exposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposition pipe — %$%","text":"","code":"lhs %$% rhs"},{"path":"https://magrittr.tidyverse.org/dev/reference/exposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exposition pipe — %$%","text":"lhs list, environment, data.frame. rhs expression names lhs available.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/exposition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exposition pipe — %$%","text":"functions, e.g. lm aggregate, data argument, allows direct use names inside data part call. operator exposes contents left-hand side object expression right give similar benefit, see examples.","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/reference/exposition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exposition pipe — %$%","text":"","code":"iris %>%   subset(Sepal.Length > mean(Sepal.Length)) %$%   cor(Sepal.Length, Sepal.Width) #> [1] 0.3361992    data.frame(z = rnorm(100)) %$%    ts.plot(z)"},{"path":"https://magrittr.tidyverse.org/dev/reference/faq-pipe-gender.html","id":null,"dir":"Reference","previous_headings":"","what":"FAQ: What is the gender of the pipe? — faq-pipe-gender","title":"FAQ: What is the gender of the pipe? — faq-pipe-gender","text":"Magritte's original quote \"Ceci n'est pas une pipe,\" word \"pipe\" feminine. However magrittr package quotes \"Ceci n'est pas un pipe,\" masculine \"pipe.\" lighthearted misappropriation intentional. Whereas object represented Magritte's painting (pipe can smoke) feminine French language, computer pipe (Anglicism French) masculine.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/freduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a list of functions sequentially — freduce","title":"Apply a list of functions sequentially — freduce","text":"function applies first function value, next function result previous function call, etc.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/freduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a list of functions sequentially — freduce","text":"","code":"freduce(value, function_list)"},{"path":"https://magrittr.tidyverse.org/dev/reference/freduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a list of functions sequentially — freduce","text":"value initial value. function_list list functions.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/freduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a list of functions sequentially — freduce","text":"result applying function turn.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/fseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract function(s) from a functional sequence. — [[.fseq","title":"Extract function(s) from a functional sequence. — [[.fseq","text":"Functional sequences can subset using single double brackets. single-bracket subset results new functional sequence, double-bracket subset results single function.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/fseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract function(s) from a functional sequence. — [[.fseq","text":"","code":"# S3 method for fseq [[(x, ...)  # S3 method for fseq [(x, ...)"},{"path":"https://magrittr.tidyverse.org/dev/reference/fseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract function(s) from a functional sequence. — [[.fseq","text":"x functional sequence ... index/indices. double brackets, index must length 1.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/fseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract function(s) from a functional sequence. — [[.fseq","text":"function functional sequence.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the function list from a functional sequence. — functions","title":"Extract the function list from a functional sequence. — functions","text":"can used extract list functions inside functional sequence created chain like . %>% foo %>% bar.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the function list from a functional sequence. — functions","text":"","code":"functions(fseq)"},{"path":"https://magrittr.tidyverse.org/dev/reference/functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the function list from a functional sequence. — functions","text":"fseq functional sequence ala magrittr.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the function list from a functional sequence. — functions","text":"list functions","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/magrittr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"magrittr - Ceci n'est pas un pipe — magrittr-package","title":"magrittr - Ceci n'est pas un pipe — magrittr-package","text":"magrittr package offers set operators promote semantics improve code structuring sequences data operations left--right (opposed inside ), avoiding nested function calls, minimizing need local variables function definitions, making easy add steps anywhere sequence operations. operators pipe left-hand side values forward expressions appear right-hand side, .e. one can replace f(x) x %>% f, %>% (main) pipe-operator.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/magrittr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"magrittr - Ceci n'est pas un pipe — magrittr-package","text":"Consider example . Four operations performed arrive desired data set, written natural order: order execution. Also, temporary variables needed. yet another operation required, straight-forward add sequence operations whereever may needed. detailed introduction see vignette (vignette(\"magrittr\")) documentation pages available operators:","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/reference/magrittr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"magrittr - Ceci n'est pas un pipe — magrittr-package","text":"Maintainer: Lionel Henry lionel@rstudio.com Authors: Stefan Milton Bache stefan@stefanbache.dk (Original author creator magrittr) [copyright holder] Hadley Wickham hadley@rstudio.com contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/magrittr-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"magrittr - Ceci n'est pas un pipe — magrittr-package","text":"","code":"if (FALSE) {  the_data <-   read.csv('/path/to/data/file.csv') %>%   subset(variable_a > x) %>%   transform(variable_c = variable_a/variable_b) %>%   head(100) }"},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe-eager.html","id":null,"dir":"Reference","previous_headings":"","what":"Eager pipe — pipe-eager","title":"Eager pipe — pipe-eager","text":"Whereas %>% lazy evaluates piped expressions needed, %!>% eager evaluates piped input step. produces intuitive behaviour functions called side effects, displaying message. Note can also solve making function strict. Call force() first argument function force sequential evaluation, even lazy %>% pipe. See examples section.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe-eager.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eager pipe — pipe-eager","text":"","code":"lhs %!>% rhs"},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe-eager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eager pipe — pipe-eager","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe-eager.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eager pipe — pipe-eager","text":"","code":"f <- function(x) {   message(\"foo\")   x } g <- function(x) {   message(\"bar\")   x } h <- function(x) {   message(\"baz\")   invisible(x) }  # The following lazy pipe sequence is equivalent to `h(g(f()))`. # Given R's lazy evaluation behaviour,`f()` and `g()` are lazily # evaluated when `h()` is already running. This causes the messages # to appear in reverse order: NULL %>% f() %>% g() %>% h() #> baz #> bar #> foo  # Use the eager pipe to fix this: NULL %!>% f() %!>% g() %!>% h() #> foo #> bar #> baz  # Or fix this by calling `force()` on the function arguments f <- function(x) {   force(x)   message(\"foo\")   x } g <- function(x) {   force(x)   message(\"bar\")   x } h <- function(x) {   force(x)   message(\"baz\")   invisible(x) }  # With strict functions, the arguments are evaluated sequentially NULL %>% f() %>% g() %>% h() #> foo #> bar #> baz  # Instead of forcing, you can also check the type of your functions. # Type-checking also has the effect of making your function lazy."},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe — %>%","title":"Pipe — %>%","text":"Pipe object forward function call expression.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"using-gt-with-unary-function-calls","dir":"Reference","previous_headings":"","what":"Using %>% with unary function calls","title":"Pipe — %>%","text":"functions require one argument, x %>% f equivalent f(x) (exactly equivalent; see technical note .)","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"placing-lhs-as-the-first-argument-in-rhs-call","dir":"Reference","previous_headings":"","what":"Placing lhs as the first argument in rhs call","title":"Pipe — %>%","text":"default behavior %>% multiple arguments required rhs call, place lhs first argument, .e. x %>% f(y) equivalent f(x, y).","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"placing-lhs-elsewhere-in-rhs-call","dir":"Reference","previous_headings":"","what":"Placing lhs elsewhere in rhs call","title":"Pipe — %>%","text":"Often want lhs rhs call another position first. purpose can use dot (.) placeholder. example, y %>% f(x, .) equivalent f(x, y) z %>% f(x, y, arg = .) equivalent f(x, y, arg = z).","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"using-the-dot-for-secondary-purposes","dir":"Reference","previous_headings":"","what":"Using the dot for secondary purposes","title":"Pipe — %>%","text":"Often, attribute property lhs desired rhs call addition value lhs , e.g. number rows columns. perfectly valid use dot placeholder several times rhs call, design behavior slightly different using inside nested function calls. particular, placeholder used nested function call, lhs also placed first argument! reason use-cases produces readable code. example, iris %>% subset(1:nrow(.) %% 2 == 0) equivalent iris %>% subset(., 1:nrow(.) %% 2 == 0) slightly compact. possible overrule behavior enclosing rhs braces. example, 1:10 %>% {c(min(.), max(.))} equivalent c(min(1:10), max(1:10)).","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"using-gt-with-call-or-function-producing-rhs","dir":"Reference","previous_headings":"","what":"Using %>% with call- or function-producing rhs","title":"Pipe — %>%","text":"possible force evaluation rhs piping lhs takes place. useful rhs produces relevant call function. evaluate rhs first, enclose parentheses, .e. %>% (function(x) x^2), 1:10 %>% (call(\"sum\")). Another example relevant reference class methods accessed using $ operator, one x %>% (rc$f), x %>% rc$f.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"using-lambda-expressions-with-gt-","dir":"Reference","previous_headings":"","what":"Using lambda expressions with %>%","title":"Pipe — %>%","text":"rhs essentially one-expression body unary function. Therefore defining lambdas magrittr natural, definitions regular functions: single expression needed one encloses body pair braces, { rhs }. However, note within braces \"first-argument rule\": exactly like writing unary function argument name \".\" (dot).","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"using-the-dot-place-holder-as-lhs","dir":"Reference","previous_headings":"","what":"Using the dot-place holder as lhs","title":"Pipe — %>%","text":"dot used lhs, result functional sequence, .e. function applies entire chain right-hand sides turn input. See examples.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"technical-notes","dir":"Reference","previous_headings":"","what":"Technical notes","title":"Pipe — %>%","text":"magrittr pipe operators use non-standard evaluation. capture inputs examines figure proceed. First function produced individual right-hand side expressions, result obtained applying function left-hand side. purposes, one can disregard subtle aspects magrittr's evaluation, functions may capture calling environment, thus using operators exactly equivalent \"standard call\" without pipe-operators. Another note special attention advised using non-magrittr operators pipe-chain (+, -, $, etc.), operator precedence impact chain evaluated. general advised use aliases provided magrittr.","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe — %>%","text":"","code":"# Basic use: iris %>% head #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # Use with lhs as first argument iris %>% head(10) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           5.1         3.5          1.4         0.2  setosa #> 2           4.9         3.0          1.4         0.2  setosa #> 3           4.7         3.2          1.3         0.2  setosa #> 4           4.6         3.1          1.5         0.2  setosa #> 5           5.0         3.6          1.4         0.2  setosa #> 6           5.4         3.9          1.7         0.4  setosa #> 7           4.6         3.4          1.4         0.3  setosa #> 8           5.0         3.4          1.5         0.2  setosa #> 9           4.4         2.9          1.4         0.2  setosa #> 10          4.9         3.1          1.5         0.1  setosa  # Using the dot place-holder \"Ceci n'est pas une pipe\" %>% gsub(\"une\", \"un\", .) #> [1] \"Ceci n'est pas un pipe\"    # When dot is nested, lhs is still placed first: sample(1:10) %>% paste0(LETTERS[.]) #>  [1] \"2B\"  \"1A\"  \"9I\"  \"4D\"  \"10J\" \"5E\"  \"3C\"  \"6F\"  \"8H\"  \"7G\"   # This can be avoided: rnorm(100) %>% {c(min(.), mean(.), max(.))} %>% floor #> [1] -3  0  2  # Lambda expressions:  iris %>% {   size <- sample(1:10, size = 1)   rbind(head(., size), tail(., size)) } #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1            5.1         3.5          1.4         0.2    setosa #> 2            4.9         3.0          1.4         0.2    setosa #> 3            4.7         3.2          1.3         0.2    setosa #> 4            4.6         3.1          1.5         0.2    setosa #> 5            5.0         3.6          1.4         0.2    setosa #> 6            5.4         3.9          1.7         0.4    setosa #> 7            4.6         3.4          1.4         0.3    setosa #> 144          6.8         3.2          5.9         2.3 virginica #> 145          6.7         3.3          5.7         2.5 virginica #> 146          6.7         3.0          5.2         2.3 virginica #> 147          6.3         2.5          5.0         1.9 virginica #> 148          6.5         3.0          5.2         2.0 virginica #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica  # renaming in lambdas: iris %>% {   my_data <- .   size <- sample(1:10, size = 1)   rbind(head(my_data, size), tail(my_data, size)) } #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1            5.1         3.5          1.4         0.2    setosa #> 2            4.9         3.0          1.4         0.2    setosa #> 3            4.7         3.2          1.3         0.2    setosa #> 4            4.6         3.1          1.5         0.2    setosa #> 5            5.0         3.6          1.4         0.2    setosa #> 6            5.4         3.9          1.7         0.4    setosa #> 7            4.6         3.4          1.4         0.3    setosa #> 8            5.0         3.4          1.5         0.2    setosa #> 9            4.4         2.9          1.4         0.2    setosa #> 10           4.9         3.1          1.5         0.1    setosa #> 141          6.7         3.1          5.6         2.4 virginica #> 142          6.9         3.1          5.1         2.3 virginica #> 143          5.8         2.7          5.1         1.9 virginica #> 144          6.8         3.2          5.9         2.3 virginica #> 145          6.7         3.3          5.7         2.5 virginica #> 146          6.7         3.0          5.2         2.3 virginica #> 147          6.3         2.5          5.0         1.9 virginica #> 148          6.5         3.0          5.2         2.0 virginica #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica  # Building unary functions with %>% trig_fest <- . %>% tan %>% cos %>% sin  1:10 %>% trig_fest #>  [1]  0.0133878 -0.5449592  0.8359477  0.3906486 -0.8257855  0.8180174 #>  [7]  0.6001744  0.7640323  0.7829771  0.7153150 trig_fest(1:10) #>  [1]  0.0133878 -0.5449592  0.8359477  0.3906486 -0.8257855  0.8180174 #>  [7]  0.6001744  0.7640323  0.7829771  0.7153150"},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe_eager_lexical.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazy and eager pipes — pipe_eager_lexical","title":"Lazy and eager pipes — pipe_eager_lexical","text":"Assign pipe variants infix symbol like %>%.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe_eager_lexical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazy and eager pipes — pipe_eager_lexical","text":"","code":"pipe_eager_lexical(lhs, rhs)  pipe_lazy_masking(lhs, rhs)  pipe_nested(lhs, rhs)"},{"path":"https://magrittr.tidyverse.org/dev/reference/pipe_eager_lexical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazy and eager pipes — pipe_eager_lexical","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/print.fseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for functional sequence. — print.fseq","title":"Print method for functional sequence. — print.fseq","text":"Print method functional sequence.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/print.fseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for functional sequence. — print.fseq","text":"","code":"# S3 method for fseq print(x, ...)"},{"path":"https://magrittr.tidyverse.org/dev/reference/print.fseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for functional sequence. — print.fseq","text":"x functional sequence object ... used.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/print.fseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for functional sequence. — print.fseq","text":"x","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/tee.html","id":null,"dir":"Reference","previous_headings":"","what":"Tee pipe — %T>%","title":"Tee pipe — %T>%","text":"Pipe value forward function- call expression return original value instead result. useful expression used side-effect, say plotting printing.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/tee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tee pipe — %T>%","text":"","code":"lhs %T>% rhs"},{"path":"https://magrittr.tidyverse.org/dev/reference/tee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tee pipe — %T>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://magrittr.tidyverse.org/dev/reference/tee.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tee pipe — %T>%","text":"tee pipe works like %>%, except return value lhs , result rhs function/expression.","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/reference/tee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tee pipe — %T>%","text":"","code":"rnorm(200) %>% matrix(ncol = 2) %T>% plot %>% # plot usually does not return anything.  colSums  #> [1] -11.72538  20.08735"},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"magrittr-203","dir":"Changelog","previous_headings":"","what":"magrittr 2.0.3","title":"magrittr 2.0.3","text":"CRAN release: 2022-03-30 Fixed C level protection issue %>% (#256).","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"magrittr-202","dir":"Changelog","previous_headings":"","what":"magrittr 2.0.2","title":"magrittr 2.0.2","text":"CRAN release: 2022-01-26 New eager pipe %!>% sequential evaluation (#247). Consider using force() functions instead make strict, sequentiality required. See examples ?\"pipe-eager\". Fixed issue cause pipe invocations fail versions R built --enable-strict-barrier. (#239, @kevinushey)","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"magrittr-201","dir":"Changelog","previous_headings":"","what":"magrittr 2.0.1","title":"magrittr 2.0.1","text":"CRAN release: 2020-11-17 Fixed issue caused objects certain names present calling environment (#233). Fixed regression freduce() long lists (kcf-jackson/sketch#5).","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"fast-and-lean-implementation-of-the-pipe-2-0-0","dir":"Changelog","previous_headings":"","what":"Fast and lean implementation of the pipe","title":"magrittr 2.0.0","text":"pipe rewritten C following goals mind: Minimal performance cost. Minimal impact backtraces. impact reference counts. part rewrite changed behaviour pipe make closer implementation likely included future version R. pipe now evaluates piped expressions lazily (#120). main consequence change warnings errors can now handled trailing pipe calls:","code":"stop(\"foo\") %>% try() warning(\"bar\") %>% suppressWarnings()"},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"magrittr 2.0.0","text":"pipe rewrite generally affect code. checked magrittr 2800 CRAN packages found dozen failures. development version magrittr advertised social media 3 months trial period, major issues reported. However, corner cases might require updating code. report backward incompatibilities found real code help transition, find issue code.","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"behaviour-of-return-in-a-pipeline-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Behaviour of return() in a pipeline","title":"magrittr 2.0.0","text":"previous versions magrittr, behaviour return() within pipe expressions undefined. return current pipe expression, whole pipeline, enclosing function? behaviour makes sense return enclosing function. However, can’t make work easily new implementation, calling return() now error. magrittr 1.5, return() used return current pipe expression. can rewrite equivalent: backward-compatibility special-cased trailing return() calls common occurrence packages: Note however returns pipeline, enclosing function (historical behaviour): generally best avoid using return() pipeline, even trailing.","code":"my_function <- function(x) {   x %>% {     if (.) return(\"true\")     \"false\"   } }  my_function(TRUE) #> Error: no function to return from, jumping to top level my_function <- function(x) {   x %>% {     if (.) {       \"true\"     } else {       \"false\"     }   } }  my_function(TRUE) #> [1] \"true\" 1 %>% identity() %>% return() my_function <- function() {   \"value\" %>% identity() %>% return()   \"wrong value\" }  my_function() #> [1] \"wrong value\""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"failures-caused-by-laziness-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Failures caused by laziness","title":"magrittr 2.0.0","text":"new lazy model evaluation pipe expressions, earlier parts pipeline yet evaluated last pipe expression called. get evaluated last function actually uses piped arguments: generally cause problems. However found functions special behaviour, written assumption earlier parts pipeline already evaluated already produced side effects. generally incorrect behaviour means functions work properly called nested form, e.g. f(g(1)) instead 1 %>% g() %>% f(). solution fix call force() inputs force evaluation, check side effects: Another issue caused laziness function pipeline returns invisibly, whole pipeline returns invisibly well. consistent equivalent nested code. behaviour can worked around two ways. can force visibility wrapping pipeline parentheses: assigning result variable return :","code":"ignore <- function(x) \"return value\" stop(\"never called\") %>% ignore() #> [1] \"return value\" my_function <- function(data) {   force(data)   peek_side_effect() } 1 %>% identity() %>% invisible() 1 %>% invisible() %>% identity() 1 %>% identity() %>% invisible() %>% identity() my_function <- function(x) {   (x %>% invisible() %>% identity()) } my_function <- function(x) {   out <- x %>% invisible() %>% identity()   out }"},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"incorrect-call-stack-introspection-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Incorrect call stack introspection","title":"magrittr 2.0.0","text":"magrittr expressions longer evaluated frames can inspected sys.frames() sys.parent(). Using functions implementing actual functionality (opposed debugging tools) likely produce bugs. Instead, generally use parent.frame() works even R code called non-inspectable frames. happens e.g. .call() new C implementation magrittr.","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"incorrect-assumptions-about-magrittr-internals-2-0-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Incorrect assumptions about magrittr internals","title":"magrittr 2.0.0","text":"packages depending magrittr internally structured. Robust code use documented exported API packages.","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"magrittr 2.0.0","text":"Can now use placeholder . splicing operator !!! rlang (#191). Piped arguments now persistent. can evaluated pipeline returned, fixes subtle issues function factories (#159, #195).","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"magrittr-15","dir":"Changelog","previous_headings":"","what":"magrittr 1.5","title":"magrittr 1.5","text":"CRAN release: 2014-11-22","code":""},{"path":[]},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"functional-sequences-1-5","dir":"Changelog","previous_headings":"New features","what":"Functional sequences.","title":"magrittr 1.5","text":"pipeline, “functional sequence”, need applied left-hand side value instantly. Instead can serve function definition. pipeline left-left-hand side magrittr placeholder (dot .) thus create function, applies right-hand side sequence argument, e.g. f <- . %>% abs %>% mean(na.rm = TRUE).","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"new-operators-1-5","dir":"Changelog","previous_headings":"New features","what":"New operators","title":"magrittr 1.5","text":"Three new operators introduced special cases Assignment pipe: %<>% Tee pipe: %T>% Exposition pipe: %$% information see documentation, e.g. ?%T>%.","code":""},{"path":"https://magrittr.tidyverse.org/dev/news/index.html","id":"lambdas-1-5","dir":"Changelog","previous_headings":"New features","what":"Lambdas","title":"magrittr 1.5","text":"Lambdas can now made enclosing several statements curly braces, unary function dot argument. information examples, see updated vignette, help files.","code":""}]
